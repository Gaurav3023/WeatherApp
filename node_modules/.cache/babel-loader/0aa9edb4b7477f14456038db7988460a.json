{"ast":null,"code":"var _jsxFileName = \"/Users/gauravsaini/Downloads/weatherApp-Reactjs-master/src/forcast.js\";\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport apiKeys from \"./apiKeys\";\nimport Autosuggest from \"react-autosuggest\";\nimport ReactAnimatedWeather from \"react-animated-weather\";\n\nfunction Forcast(props) {\n  const [query, setQuery] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const [weather, setWeather] = useState({});\n  const [suggestions, setSuggestions] = useState([]);\n\n  const onChange = (event, {\n    newValue\n  }) => {\n    setQuery(newValue);\n  };\n\n  const onSuggestionsFetchRequested = ({\n    value\n  }) => {\n    axios.get(`${apiKeys.base}find?q=${value}&type=like&sort=population&cnt=5&APPID=${apiKeys.key}`).then(response => {\n      const suggestions = response.data.list.map(item => item.name);\n      setSuggestions(suggestions);\n    }).catch(function (error) {\n      console.log(error);\n    });\n  };\n\n  const onSuggestionsClearRequested = () => {\n    setSuggestions([]);\n  };\n\n  const getSuggestionValue = suggestion => suggestion;\n\n  const renderSuggestion = suggestion => /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 44\n    }\n  }, suggestion);\n\n  const search = () => {\n    axios.get(`${apiKeys.base}weather?q=${query}&units=metric&APPID=${apiKeys.key}`).then(response => {\n      setWeather(response.data);\n      setQuery(\"\");\n      setSuggestions([]); // Clear suggestions after selecting a city\n    }).catch(function (error) {\n      console.log(error);\n      setWeather(\"\");\n      setQuery(\"\");\n      setError({\n        message: \"Not Found\",\n        query: query\n      });\n    });\n  };\n\n  useEffect(() => {\n    search(\"Toronto\");\n  }, []);\n  const inputProps = {\n    placeholder: \"Search any city\",\n    value: query,\n    onChange: onChange\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"forecast\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"forecast-icon\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ReactAnimatedWeather, {\n    icon: props.icon,\n    color: \"white\",\n    size: 112,\n    animate: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"today-weather\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }, props.weather), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"search-box\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Autosuggest, {\n    suggestions: suggestions,\n    onSuggestionsFetchRequested: onSuggestionsFetchRequested,\n    onSuggestionsClearRequested: onSuggestionsClearRequested,\n    getSuggestionValue: getSuggestionValue,\n    renderSuggestion: renderSuggestion,\n    inputProps: inputProps,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"img-box\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: \"https://images.avishkaar.cc/workflow/newhp/search-white.png\",\n    onClick: search,\n    alt: \"Search\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }\n  }))), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }\n  }, typeof weather.main !== \"undefined\" ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"li\", {\n    className: \"cityHead\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 17\n    }\n  }, weather.name, \", \", weather.sys.country), /*#__PURE__*/React.createElement(\"img\", {\n    className: \"temp\",\n    src: `https://openweathermap.org/img/wn/${weather.weather[0].icon}.png`,\n    alt: \"Weather icon\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 17\n    }\n  }))) : /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }\n  }, error.query, \" \", error.message))));\n}\n\nexport default Forcast;","map":{"version":3,"sources":["/Users/gauravsaini/Downloads/weatherApp-Reactjs-master/src/forcast.js"],"names":["React","useState","useEffect","axios","apiKeys","Autosuggest","ReactAnimatedWeather","Forcast","props","query","setQuery","error","setError","weather","setWeather","suggestions","setSuggestions","onChange","event","newValue","onSuggestionsFetchRequested","value","get","base","key","then","response","data","list","map","item","name","catch","console","log","onSuggestionsClearRequested","getSuggestionValue","suggestion","renderSuggestion","search","message","inputProps","placeholder","icon","main","sys","country"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport apiKeys from \"./apiKeys\";\nimport Autosuggest from \"react-autosuggest\";\nimport ReactAnimatedWeather from \"react-animated-weather\";\n\nfunction Forcast(props) {\n  const [query, setQuery] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const [weather, setWeather] = useState({});\n  const [suggestions, setSuggestions] = useState([]);\n\n  const onChange = (event, { newValue }) => {\n    setQuery(newValue);\n  };\n\n  const onSuggestionsFetchRequested = ({ value }) => {\n    axios\n      .get(\n        `${apiKeys.base}find?q=${value}&type=like&sort=population&cnt=5&APPID=${apiKeys.key}`\n      )\n      .then((response) => {\n        const suggestions = response.data.list.map((item) => item.name);\n        setSuggestions(suggestions);\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n  };\n\n  const onSuggestionsClearRequested = () => {\n    setSuggestions([]);\n  };\n\n  const getSuggestionValue = (suggestion) => suggestion;\n\n  const renderSuggestion = (suggestion) => <div>{suggestion}</div>;\n\n  const search = () => {\n    axios\n      .get(\n        `${apiKeys.base}weather?q=${query}&units=metric&APPID=${apiKeys.key}`\n      )\n      .then((response) => {\n        setWeather(response.data);\n        setQuery(\"\");\n        setSuggestions([]); // Clear suggestions after selecting a city\n      })\n      .catch(function (error) {\n        console.log(error);\n        setWeather(\"\");\n        setQuery(\"\");\n        setError({ message: \"Not Found\", query: query });\n      });\n  };\n\n  useEffect(() => {\n    search(\"Toronto\");\n  }, []);\n\n  const inputProps = {\n    placeholder: \"Search any city\",\n    value: query,\n    onChange: onChange,\n  };\n\n  return (\n    <div className=\"forecast\">\n      <div className=\"forecast-icon\">\n        <ReactAnimatedWeather\n          icon={props.icon}\n          color=\"white\"\n          size={112}\n          animate={true}\n        />\n      </div>\n      <div className=\"today-weather\">\n        <h3>{props.weather}</h3>\n        <div className=\"search-box\">\n          <Autosuggest\n            suggestions={suggestions}\n            onSuggestionsFetchRequested={onSuggestionsFetchRequested}\n            onSuggestionsClearRequested={onSuggestionsClearRequested}\n            getSuggestionValue={getSuggestionValue}\n            renderSuggestion={renderSuggestion}\n            inputProps={inputProps}\n          />\n          <div className=\"img-box\">\n            <img\n              src=\"https://images.avishkaar.cc/workflow/newhp/search-white.png\"\n              onClick={search}\n              alt=\"Search\"\n            />\n          </div>\n        </div>\n        <ul>\n          {typeof weather.main !== \"undefined\" ? (\n            <div>\n              <li className=\"cityHead\">\n                <p>\n                  {weather.name}, {weather.sys.country}\n                </p>\n                <img\n                  className=\"temp\"\n                  src={`https://openweathermap.org/img/wn/${weather.weather[0].icon}.png`}\n                  alt=\"Weather icon\"\n                />\n              </li>\n              {/* ... (other details) */}\n            </div>\n          ) : (\n            <li>\n              {error.query} {error.message}\n            </li>\n          )}\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default Forcast;\n"]},"metadata":{},"sourceType":"module"}