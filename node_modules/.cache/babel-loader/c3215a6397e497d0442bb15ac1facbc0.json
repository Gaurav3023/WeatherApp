{"ast":null,"code":"var _jsxFileName = \"/Users/gauravsaini/Downloads/weatherApp-Reactjs-master/src/forcast.js\";\nimport React, { useState, useEffect, Component } from \"react\";\nimport axios from \"axios\";\nimport apiKeys from \"./apiKeys\";\nimport ReactAnimatedWeather from \"react-animated-weather\";\nimport Autosuggest from \"react-autosuggest\";\n\nfunction Forcast(props) {\n  const [query, setQuery] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const [weather, setWeather] = useState({});\n  const [suggestions, setSuggestions] = useState([]);\n\n  const onSuggestionsFetchRequested = ({\n    value\n  }) => {\n    axios.get(`${apiKeys.base}find?q=${value}&type=like&sort=population&cnt=5&APPID=${apiKeys.key}`).then(response => {\n      const suggestions = response.data.list.map(item => item.name);\n      setSuggestions(suggestions);\n    }).catch(function (error) {\n      console.log(error);\n    });\n  };\n\n  const onSuggestionsClearRequested = () => {\n    setSuggestions([]);\n  };\n\n  const getSuggestionValue = suggestion => suggestion;\n\n  const renderSuggestion = suggestion => /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 44\n    }\n  }, suggestion);\n\n  const search = () => {\n    axios.get(`${apiKeys.base}weather?q=${query}&units=metric&APPID=${apiKeys.key}`).then(response => {\n      setWeather(response.data);\n      setQuery(\"\");\n      setSuggestions([]); // Clear suggestions after selecting a city\n    }).catch(function (error) {\n      console.log(error);\n      setWeather(\"\");\n      setQuery(\"\");\n      setError({\n        message: \"Not Found\",\n        query: query\n      });\n    });\n  };\n\n  useEffect(() => {\n    search(\"Toronto\");\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"forecast\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"forecast-icon\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ReactAnimatedWeather, {\n    icon: props.icon,\n    color: defaults.color,\n    size: defaults.size,\n    animate: defaults.animate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"today-weather\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }\n  }, props.weather), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"search-box\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    className: \"search-bar\",\n    placeholder: \"Search any city\",\n    onChange: e => setQuery(e.target.value),\n    value: query,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"img-box\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 11\n    }\n  }, \" \", /*#__PURE__*/React.createElement(\"img\", {\n    src: \"https://images.avishkaar.cc/workflow/newhp/search-white.png\",\n    onClick: search,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }\n  }))), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }\n  }, typeof weather.main != \"undefined\" ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }\n  }, \" \", /*#__PURE__*/React.createElement(\"li\", {\n    className: \"cityHead\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 17\n    }\n  }, weather.name, \", \", weather.sys.country), /*#__PURE__*/React.createElement(\"img\", {\n    className: \"temp\",\n    src: `https://openweathermap.org/img/wn/${weather.weather[0].icon}.png`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 15\n    }\n  }, \"Temperature\", \" \", /*#__PURE__*/React.createElement(\"span\", {\n    className: \"temp\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 17\n    }\n  }, Math.round(weather.main.temp), \"\\xB0c (\", weather.weather[0].main, \")\")), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 15\n    }\n  }, \"Humidity\", \" \", /*#__PURE__*/React.createElement(\"span\", {\n    className: \"temp\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 17\n    }\n  }, Math.round(weather.main.humidity), \"%\")), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 15\n    }\n  }, \"Visibility\", \" \", /*#__PURE__*/React.createElement(\"span\", {\n    className: \"temp\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 17\n    }\n  }, Math.round(weather.visibility), \" mi\")), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 15\n    }\n  }, \"Wind Speed\", \" \", /*#__PURE__*/React.createElement(\"span\", {\n    className: \"temp\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 17\n    }\n  }, Math.round(weather.wind.speed), \" Km/h\"))) : /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }\n  }, error.query, \" \", error.message))));\n}\n\nexport default Forcast;","map":{"version":3,"sources":["/Users/gauravsaini/Downloads/weatherApp-Reactjs-master/src/forcast.js"],"names":["React","useState","useEffect","Component","axios","apiKeys","ReactAnimatedWeather","Autosuggest","Forcast","props","query","setQuery","error","setError","weather","setWeather","suggestions","setSuggestions","onSuggestionsFetchRequested","value","get","base","key","then","response","data","list","map","item","name","catch","console","log","onSuggestionsClearRequested","getSuggestionValue","suggestion","renderSuggestion","search","message","icon","defaults","color","size","animate","e","target","main","sys","country","Math","round","temp","humidity","visibility","wind","speed"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, Component } from \"react\";\nimport axios from \"axios\";\nimport apiKeys from \"./apiKeys\";\nimport ReactAnimatedWeather from \"react-animated-weather\";\nimport Autosuggest from \"react-autosuggest\";\n\nfunction Forcast(props) {\n  const [query, setQuery] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const [weather, setWeather] = useState({});\n  const [suggestions, setSuggestions] = useState([]);\n\n  const onSuggestionsFetchRequested = ({ value }) => {\n    axios\n      .get(\n        `${apiKeys.base}find?q=${value}&type=like&sort=population&cnt=5&APPID=${apiKeys.key}`\n      )\n      .then((response) => {\n        const suggestions = response.data.list.map((item) => item.name);\n        setSuggestions(suggestions);\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n  };\n\n  const onSuggestionsClearRequested = () => {\n    setSuggestions([]);\n  };\n\n  const getSuggestionValue = (suggestion) => suggestion;\n\n  const renderSuggestion = (suggestion) => <div>{suggestion}</div>;\n\n  const search = () => {\n    axios\n      .get(\n        `${apiKeys.base}weather?q=${query}&units=metric&APPID=${apiKeys.key}`\n      )\n      .then((response) => {\n        setWeather(response.data);\n        setQuery(\"\");\n        setSuggestions([]); // Clear suggestions after selecting a city\n      })\n      .catch(function (error) {\n        console.log(error);\n        setWeather(\"\");\n        setQuery(\"\");\n        setError({ message: \"Not Found\", query: query });\n      });\n  };\n\n  useEffect(() => {\n    search(\"Toronto\");\n  }, []);\n\n  return (\n    <div className=\"forecast\">\n      <div className=\"forecast-icon\">\n        <ReactAnimatedWeather\n          icon={props.icon}\n          color={defaults.color}\n          size={defaults.size}\n          animate={defaults.animate}\n        />\n      </div>\n      <div className=\"today-weather\">\n        <h3>{props.weather}</h3>\n        <div className=\"search-box\">\n          <input\n            type=\"text\"\n            className=\"search-bar\"\n            placeholder=\"Search any city\"\n            onChange={(e) => setQuery(e.target.value)}\n            value={query}\n          />\n          <div className=\"img-box\">\n            {\" \"}\n            <img\n              src=\"https://images.avishkaar.cc/workflow/newhp/search-white.png\"\n              onClick={search}\n            />\n          </div>\n        </div>\n        <ul>\n          {typeof weather.main != \"undefined\" ? (\n            <div>\n              {\" \"}\n              <li className=\"cityHead\">\n                <p>\n                  {weather.name}, {weather.sys.country}\n                </p>\n                <img\n                  className=\"temp\"\n                  src={`https://openweathermap.org/img/wn/${weather.weather[0].icon}.png`}\n                />\n              </li>\n              <li>\n                Temperature{\" \"}\n                <span className=\"temp\">\n                  {Math.round(weather.main.temp)}°c ({weather.weather[0].main})\n                </span>\n              </li>\n              <li>\n                Humidity{\" \"}\n                <span className=\"temp\">\n                  {Math.round(weather.main.humidity)}%\n                </span>\n              </li>\n              <li>\n                Visibility{\" \"}\n                <span className=\"temp\">\n                  {Math.round(weather.visibility)} mi\n                </span>\n              </li>\n              <li>\n                Wind Speed{\" \"}\n                <span className=\"temp\">\n                  {Math.round(weather.wind.speed)} Km/h\n                </span>\n              </li>\n            </div>\n          ) : (\n            <li>\n              {error.query} {error.message}\n            </li>\n          )}\n        </ul>\n      </div>\n    </div>\n  );\n}\nexport default Forcast;\n"]},"metadata":{},"sourceType":"module"}