{"ast":null,"code":"var _jsxFileName = \"/Users/gauravsaini/Downloads/weatherApp-Reactjs-master/src/currentLocation.js\";\nimport React from \"react\";\nimport apiKeys from \"./apiKeys\";\nimport Clock from \"react-live-clock\";\nimport Forcast from \"./forcast\";\nimport loader from \"./images/WeatherIcons.gif\";\nimport ReactAnimatedWeather from \"react-animated-weather\";\n\nconst dateBuilder = d => {\n  let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n  let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n  let day = days[d.getDay()];\n  let date = d.getDate();\n  let month = months[d.getMonth()];\n  let year = d.getFullYear();\n  return `${day}, ${month} ${date}, ${year}`;\n};\n\nconst defaults = {\n  color: \"white\",\n  size: 112,\n  animate: true\n};\n\nclass Weather extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      lat: undefined,\n      lon: undefined,\n      errorMessage: undefined,\n      temperatureC: undefined,\n      temperatureF: undefined,\n      city: undefined,\n      country: undefined,\n      humidity: undefined,\n      description: undefined,\n      icon: \"CLEAR_DAY\",\n      sunrise: undefined,\n      sunset: undefined,\n      errorMsg: undefined\n    };\n\n    this.getPosition = options => {\n      return new Promise(function (resolve, reject) {\n        navigator.geolocation.getCurrentPosition(resolve, reject, options);\n      });\n    };\n\n    this.updateWeather = () => {\n      // Check if we have the user's location before fetching weather\n      if (this.state.lat && this.state.lon) {\n        this.getWeather(this.state.lat, this.state.lon);\n      }\n    };\n\n    this.getWeather = async (lat, lon) => {\n      try {\n        const api_call = await fetch(`${apiKeys.base}weather?lat=${lat}&lon=${lon}&units=metric&APPID=${apiKeys.key}`);\n        const data = await api_call.json();\n        this.setState({\n          lat: lat,\n          lon: lon,\n          city: data.name,\n          temperatureC: Math.round(data.main.temp),\n          temperatureF: Math.round(data.main.temp * 1.8 + 32),\n          humidity: data.main.humidity,\n          main: data.weather[0].main,\n          country: data.sys.country\n        }); // Map weather conditions to animated icons\n\n        switch (this.state.main) {\n          case \"Haze\":\n            this.setState({\n              icon: \"CLEAR_DAY\"\n            });\n            break;\n\n          case \"Clouds\":\n            this.setState({\n              icon: \"CLOUDY\"\n            });\n            break;\n\n          case \"Rain\":\n            this.setState({\n              icon: \"RAIN\"\n            });\n            break;\n          // ... (other cases)\n\n          default:\n            this.setState({\n              icon: \"CLEAR_DAY\"\n            });\n        }\n      } catch (error) {\n        console.error(\"Error fetching weather:\", error);\n      }\n    };\n  }\n\n  componentDidMount() {\n    // Check if geolocation is available\n    if (navigator.geolocation) {\n      // Try to get the user's location\n      this.getPosition().then(position => {\n        // Fetch weather data with the obtained location\n        this.getWeather(position.coords.latitude, position.coords.longitude);\n      }).catch(err => {\n        // Handle errors or use a fallback location\n        console.error(\"Error getting location:\", err);\n        this.getWeather(28.67, 77.22); // Fallback location (Delhi, India in this case)\n\n        alert(\"You have disabled location service. Allow 'This APP' to access your location. Your current location will be used for calculating Real-time weather.\");\n      });\n    } else {\n      alert(\"Geolocation not available\");\n    } // Set up periodic weather updates (every 10 minutes in this example)\n\n\n    this.timerID = setInterval(() => this.updateWeather(), 600000);\n  }\n\n  componentWillUnmount() {\n    // Clear the interval when the component is unmounted\n    clearInterval(this.timerID);\n  } // Function to get the user's current position\n\n\n  render() {\n    if (this.state.temperatureC) {\n      return /*#__PURE__*/React.createElement(React.Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 9\n        }\n      });\n    } else {\n      return /*#__PURE__*/React.createElement(React.Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"img\", {\n        src: loader,\n        style: {\n          width: \"50%\",\n          WebkitUserDrag: \"none\"\n        },\n        alt: \"Loading\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(\"h3\", {\n        style: {\n          color: \"white\",\n          fontSize: \"22px\",\n          fontWeight: \"600\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 11\n        }\n      }, \"Detecting your location\"), /*#__PURE__*/React.createElement(\"h3\", {\n        style: {\n          color: \"white\",\n          marginTop: \"10px\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 11\n        }\n      }, \"Your current location will be displayed on the App \", /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 64\n        }\n      }), \" & used for calculating Real-time weather.\"));\n    }\n  }\n\n}\n\nexport default Weather;","map":{"version":3,"sources":["/Users/gauravsaini/Downloads/weatherApp-Reactjs-master/src/currentLocation.js"],"names":["React","apiKeys","Clock","Forcast","loader","ReactAnimatedWeather","dateBuilder","d","months","days","day","getDay","date","getDate","month","getMonth","year","getFullYear","defaults","color","size","animate","Weather","Component","state","lat","undefined","lon","errorMessage","temperatureC","temperatureF","city","country","humidity","description","icon","sunrise","sunset","errorMsg","getPosition","options","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","updateWeather","getWeather","api_call","fetch","base","key","data","json","setState","name","Math","round","main","temp","weather","sys","error","console","componentDidMount","then","position","coords","latitude","longitude","catch","err","alert","timerID","setInterval","componentWillUnmount","clearInterval","render","width","WebkitUserDrag","fontSize","fontWeight","marginTop"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport apiKeys from \"./apiKeys\";\nimport Clock from \"react-live-clock\";\nimport Forcast from \"./forcast\";\nimport loader from \"./images/WeatherIcons.gif\";\nimport ReactAnimatedWeather from \"react-animated-weather\";\nconst dateBuilder = (d) => {\n  let months = [\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\",\n  ];\n  let days = [\n    \"Sunday\",\n    \"Monday\",\n    \"Tuesday\",\n    \"Wednesday\",\n    \"Thursday\",\n    \"Friday\",\n    \"Saturday\",\n  ];\n\n  let day = days[d.getDay()];\n  let date = d.getDate();\n  let month = months[d.getMonth()];\n  let year = d.getFullYear();\n\n  return `${day}, ${month} ${date}, ${year}`;\n};\nconst defaults = {\n  color: \"white\",\n  size: 112,\n  animate: true,\n};\n\nclass Weather extends React.Component {\n  state = {\n    lat: undefined,\n    lon: undefined,\n    errorMessage: undefined,\n    temperatureC: undefined,\n    temperatureF: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    icon: \"CLEAR_DAY\",\n    sunrise: undefined,\n    sunset: undefined,\n    errorMsg: undefined,\n  };\n\n  componentDidMount() {\n    // Check if geolocation is available\n    if (navigator.geolocation) {\n      // Try to get the user's location\n      this.getPosition()\n        .then((position) => {\n          // Fetch weather data with the obtained location\n          this.getWeather(position.coords.latitude, position.coords.longitude);\n        })\n        .catch((err) => {\n          // Handle errors or use a fallback location\n          console.error(\"Error getting location:\", err);\n          this.getWeather(28.67, 77.22); // Fallback location (Delhi, India in this case)\n          alert(\n            \"You have disabled location service. Allow 'This APP' to access your location. Your current location will be used for calculating Real-time weather.\"\n          );\n        });\n    } else {\n      alert(\"Geolocation not available\");\n    }\n\n    // Set up periodic weather updates (every 10 minutes in this example)\n    this.timerID = setInterval(() => this.updateWeather(), 600000);\n  }\n\n  componentWillUnmount() {\n    // Clear the interval when the component is unmounted\n    clearInterval(this.timerID);\n  }\n\n  // Function to get the user's current position\n  getPosition = (options) => {\n    return new Promise(function (resolve, reject) {\n      navigator.geolocation.getCurrentPosition(resolve, reject, options);\n    });\n  };\n\n  // Function to update weather information\n  updateWeather = () => {\n    // Check if we have the user's location before fetching weather\n    if (this.state.lat && this.state.lon) {\n      this.getWeather(this.state.lat, this.state.lon);\n    }\n  };\n\n  // Function to fetch weather data\n  getWeather = async (lat, lon) => {\n    try {\n      const api_call = await fetch(\n        `${apiKeys.base}weather?lat=${lat}&lon=${lon}&units=metric&APPID=${apiKeys.key}`\n      );\n      const data = await api_call.json();\n      this.setState({\n        lat: lat,\n        lon: lon,\n        city: data.name,\n        temperatureC: Math.round(data.main.temp),\n        temperatureF: Math.round(data.main.temp * 1.8 + 32),\n        humidity: data.main.humidity,\n        main: data.weather[0].main,\n        country: data.sys.country,\n      });\n\n      // Map weather conditions to animated icons\n      switch (this.state.main) {\n        case \"Haze\":\n          this.setState({ icon: \"CLEAR_DAY\" });\n          break;\n        case \"Clouds\":\n          this.setState({ icon: \"CLOUDY\" });\n          break;\n        case \"Rain\":\n          this.setState({ icon: \"RAIN\" });\n          break;\n        // ... (other cases)\n        default:\n          this.setState({ icon: \"CLEAR_DAY\" });\n      }\n    } catch (error) {\n      console.error(\"Error fetching weather:\", error);\n    }\n  };\n\n  render() {\n    if (this.state.temperatureC) {\n      return (\n        <React.Fragment>\n          {/* (unchanged) */}\n        </React.Fragment>\n      );\n    } else {\n      return (\n        <React.Fragment>\n          <img src={loader} style={{ width: \"50%\", WebkitUserDrag: \"none\" }} alt=\"Loading\" />\n          <h3 style={{ color: \"white\", fontSize: \"22px\", fontWeight: \"600\" }}>\n            Detecting your location\n          </h3>\n          <h3 style={{ color: \"white\", marginTop: \"10px\" }}>\n            Your current location will be displayed on the App <br></br> & used\n            for calculating Real-time weather.\n          </h3>\n        </React.Fragment>\n      );\n    }\n  }\n}\n\nexport default Weather;"]},"metadata":{},"sourceType":"module"}